<div class="document-container">
  <div class="document-content" style="margin: 0 6rem;">
    <div class="document-body">
      <div class="row">
        <div class="col-lg-11 col-md-11 col-sm-10 col-10">
          <div class="document-section">
            <section>
              <header>
                <h1 class="document-header">
                  A Gentle Introduction to Python
                </h1>
              </header>
              <article>
                <div class="quote">
                  "Give a man a fish and you feed him for a day. Teach a man to fish and you feed him for a lifetime."
                </div>
                <p>According to Wikipedia, <strong>computer programming</strong> is:</p>
                <div class="quote">"...a process that leads from an original formulation of a computing problem to executable computer programs. Programming involves activities such as analysis, developing understanding, generating algorithms, verification of requirements of algorithms including their correctness and resources consumption, and implementation (commonly referred to as coding) of algorithms in a target programming language."</div>
                <p>In a nutshell, coding is telling a computer to do something using a language it understands.</p>
                <p>Computers are very powerful tools, but unfortunately, they can't think for themselves. They need to be told everything: how to perform a task, how to evaluate a condition to decide which path to follow, how to handle data that comes from a device, such as the network or a disk, and how to react when something unforeseen happens, say, something is broken or missing.</p>
                <p>You can code in many different styles and languages. Is it hard? I would say <em>yes</em> and <em>no</em>. It's a bit like writing. Everybody can learn how to write, and you can too. But, what if you wanted to become a poet? Then writing alone is not enough. You have to acquire a whole other set of skills and this will take a longer and greater effort.</p>
                <p>多くの異なるスタイルと言語でコーディングできます。難しい？はい、いいえと言います。書くのと少し似ています。誰もが書く方法を学ぶことができます、そしてあなたもそうすることができます。しかし、もしあなたが詩人になりたいと思ったらどうしますか？それなら、一人で書くだけでは十分ではありません。あなたは他のすべてのスキルを習得する必要があり、これにはより長く、より大きな努力が必要になります。</p>
                <p>다양한 스타일과 언어로 코딩할 수 있습니다. 어렵나요? 나는 예와 아니오라고 말할 것입니다. 글을 쓰는 것과 비슷합니다. 누구나 글쓰기를 배울 수 있고 당신도 할 수 있습니다. 하지만 시인이 되고 싶다면? 그렇다면 글쓰기만으로는 충분하지 않습니다. 당신은 완전히 다른 일련의 기술을 습득해야 하며 이것은 더 길고 더 많은 노력을 필요로 할 것입니다.</p>
                <p>আপনি বিভিন্ন শৈলী এবং ভাষায় কোড করতে পারেন। এটা কি কঠিন? আমি হ্যাঁ এবং না বলব। এটা একটু লেখার মত। সবাই কীভাবে লিখতে হয় তা শিখতে পারে এবং আপনিও পারেন। কিন্তু, আপনি যদি কবি হতে চান? তারপর একা লেখা যথেষ্ট নয়। আপনাকে সম্পূর্ণ অন্যান্য দক্ষতা অর্জন করতে হবে এবং এটি একটি দীর্ঘ এবং বৃহত্তর প্রচেষ্টা গ্রহণ করবে।</p>
                <p>您可以使用多种不同的风格和语言进行编码。难吗？我会说是和否。这有点像写作。每个人都可以学习如何写作，你也可以。但是，如果你想成为一名诗人呢？那么仅靠写作是不够的。您必须获得一整套其他技能，这将需要更长和更大的努力。</p>
                <p>நீங்கள் பல்வேறு பாணிகள் மற்றும் மொழிகளில் குறியிடலாம். இது கடினம்? நான் ஆம் மற்றும் இல்லை என்று கூறுவேன். இது எழுதுவது போன்றது. எல்லோரும் எழுத கற்றுக்கொள்ளலாம், நீங்களும் செய்யலாம். ஆனால், நீங்கள் ஒரு கவிஞராக மாற விரும்பினால் என்ன செய்வது? பிறகு எழுதுவது மட்டும் போதாது. நீங்கள் மற்ற திறன்களைப் பெற வேண்டும், இதற்கு நீண்ட மற்றும் அதிக முயற்சி எடுக்கும்.</p>
                <p>તમે ઘણી જુદી જુદી શૈલીઓ અને ભાષાઓમાં કોડ કરી શકો છો. તે મુશ્કેલ છે? હું હા અને ના કહીશ. તે થોડું લખવા જેવું છે. દરેક વ્યક્તિ કેવી રીતે લખવું તે શીખી શકે છે, અને તમે પણ કરી શકો છો. પણ, જો તમે કવિ બનવા માંગતા હો તો? પછી એકલા લખવાનું પૂરતું નથી. તમારે કુશળતાનો બીજો સમૂહ પ્રાપ્ત કરવો પડશે અને આમાં વધુ અને વધુ પ્રયત્નોની જરૂર પડશે.</p>
                <p>In the end, it all comes down to how far you want to go down the road. Coding is not just putting together some instructions that work. It is so much more!</p>
                <p>Good code is short, fast, elegant, easy to read and understand, simple, easy to modify and extend, easy to scale and refactor, and easy to test. It takes time to be able to write code that has all these qualities at the same time, but the good news is that you're taking the first step towards it at this very moment by reading this book. And I have no doubt you can do it. Anyone can; in fact, we all program all the time, only we aren't aware of it.</p>
                <p>Would you like an example?</p>
                <p>Say you want to make instant coffee. You have to get a mug, the instant coffee jar, a teaspoon, water, and the kettle. Even if you're not aware of it, you're evaluating a lot of data. You're making sure that there is water in the kettle and that the kettle is plugged in, that the mug is clean, and that there is enough coffee in the jar. Then, you boil the water and maybe, in the meantime, you put some coffee in the mug. When the water is ready, you pour it into the cup, and stir.</p>
                <p>So, how is this programming?</p>
                <p>Well, we gathered resources (the kettle, coffee, water, teaspoon, and mug) and we verified some conditions concerning them (the kettle is plugged in, the mug is clean, and there is enough coffee). Then we started two actions (boiling the water and putting coffee in the mug), and when both of them were completed, we finally ended the procedure by pouring water in to the mug and stirring.</p>
                <p>Can you see it? I have just described the high-level functionality of a coffee program. It wasn't that hard because this is what the brain does all day long: evaluate conditions, decide to take actions, carry out tasks, repeat some of them, and stop at some point. Clean objects, put them back, and so on.</p>
                <p>All you need now is to learn how to deconstruct all those actions you do automatically in real life so that a computer can actually make some sense of them. And you need to learn a language as well, to instruct it.</p>
                <p>So this is what this book is for. I'll tell you how to do it and I'll try to do that by means of many simple but focused examples (my favorite kind).</p>
                <p>In this chapter, we are going to cover the following:</p>
                <ul class="document-list">
                  <li>Python's characteristics and ecosystem</li>
                  <li>Guidelines on how to get up and running with Python and virtual environments</li>
                  <li>How to run Python programs</li>
                  <li>How to organize Python code and Python's execution model</li>
                </ul>
                <table class="table stretch">
                <caption class="title">Table 4. Banner variables</caption>
                <colgroup>
                <col style="width: 50%;">
                <col style="width: 50%;">
                </colgroup>
                <thead>
                <tr>
                <th class="tableblock halign-left valign-top">Variable</th>
                <th class="tableblock halign-left valign-top">Description</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                <td class="tableblock halign-left valign-top"><p class="tableblock"><code>${application.version}</code></p></td>
                <td class="tableblock halign-left valign-top"><p class="tableblock">The version number of your application, as declared in <code>MANIFEST.MF</code>.
                For example, <code>Implementation-Version: 1.0</code> is printed as <code>1.0</code>.</p></td>
                </tr>
                <tr>
                <td class="tableblock halign-left valign-top"><p class="tableblock"><code>${application.formatted-version}</code></p></td>
                <td class="tableblock halign-left valign-top"><p class="tableblock">The version number of your application, as declared in <code>MANIFEST.MF</code> and formatted for display (surrounded with brackets and prefixed with <code>v</code>).
                For example <code>(v1.0)</code>.</p></td>
                </tr>
                <tr>
                <td class="tableblock halign-left valign-top"><p class="tableblock"><code>${spring-boot.version}</code></p></td>
                <td class="tableblock halign-left valign-top"><p class="tableblock">The Spring Boot version that you are using.
                For example <code>2.5.5</code>.</p></td>
                </tr>
                <tr>
                <td class="tableblock halign-left valign-top"><p class="tableblock"><code>${spring-boot.formatted-version}</code></p></td>
                <td class="tableblock halign-left valign-top"><p class="tableblock">The Spring Boot version that you are using, formatted for display (surrounded with brackets and prefixed with <code>v</code>).
                For example <code>(v2.5.5)</code>.</p></td>
                </tr>
                <tr>
                <td class="tableblock halign-left valign-top"><p class="tableblock"><code>${Ansi.NAME}</code> (or <code>${AnsiColor.NAME}</code>, <code>${AnsiBackground.NAME}</code>, <code>${AnsiStyle.NAME}</code>)</p></td>
                <td class="tableblock halign-left valign-top"><p class="tableblock">Where <code>NAME</code> is the name of an ANSI escape code.
                See <a href="https://github.com/spring-projects/spring-boot/tree/v2.5.5/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java"><code>AnsiPropertySource</code></a> for details.</p></td>
                </tr>
                <tr>
                <td class="tableblock halign-left valign-top"><p class="tableblock"><code>${application.title}</code></p></td>
                <td class="tableblock halign-left valign-top"><p class="tableblock">The title of your application, as declared in <code>MANIFEST.MF</code>.
                For example <code>Implementation-Title: MyApp</code> is printed as <code>MyApp</code>.</p></td>
                </tr>
                </tbody>
                </table>
              </article>
            </section>
          </div>
        </div>
        <div class="col-lg-1 col-md-1 col-sm-1 col-1">
          <div class="mt-5 pt-2">
            <a href="#" class="document-anchor">
              <i class="fas fa-link fa-lg"></i>
            </a>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-lg-11 col-md-11 col-sm-10 col-10">
          <div class="document-section">
            <section>
              <header>
                <h1 class="document-header">The for loop</h1>
              </header>
              <article>
                <p>The <kbd>for</kbd> loop is used when looping over a sequence, such as a list, tuple, or a collection of objects. Let's start with a simple example and expand on the concept to see what the Python syntax allows us to do:</p>
                <div class="document-code">
                  <pre class="lang-py"><code class="lang-py">
from flask import Flask
from flask_restful import Resource, Api

app = Flask(__name__)
api = Api(app)

class HelloWorld(Resource):
    def get(self):
        return {'hello': 'world'}

api.add_resource(HelloWorld, '/')

if __name__ == '__main__':
    app.run(debug=True)</code></pre>
                </div>
                <p>This simple snippet of code, when executed, prints all numbers from <kbd>0</kbd> to <kbd>4</kbd>. The <kbd>for</kbd> loop is fed the list <kbd>[0, 1, 2, 3, 4]</kbd> and at each iteration, <kbd>number</kbd> is given a value from the sequence (which is iterated sequentially, in order), then the body of the loop is executed (the print line). The <kbd>number</kbd> value changes at every iteration, according to which value is coming next from the sequence. When the sequence is exhausted, the <kbd>for</kbd> loop terminates, and the execution of the code resumes normally with the code after the loop.</p>
                <div class="document-info">
                  <div class="document-info-icon"><i class="fas fa-lightbulb fa-2x"></i></div>
                  If the condition never evaluates to <kbd>False</kbd>, the loop becomes a so-called <strong>infinite loop</strong> . Infinite loops are used, for example, when polling from network devices: you ask the socket whether there is any data, you do something with it if there is any, then you sleep for a small amount of time, and then you ask the socket again, over and over again, without ever stopping.
                </div>
                <p>Having the ability to loop over a condition, or to loop indefinitely, is the reason why the <kbd>for</kbd> loop alone is not enough, and therefore Python provides the <kbd>while</kbd> loop.</p>
                <div class="document-tip">
                  <div class="document-tip-icon"><i class="fas fa-lightbulb fa-2x"></i></div>
                  By the way, if you need the binary representation of a number, check out the <kbd>bin</kbd> function.
                </div>
                <p>Accessing the API requires a chain of steps that include authentication, authorization, and admission control. At each stage, the request may be rejected. Each stage consists of multiple plugins that are chained together. The following diagram illustrates this:</p>
                <div class="document-figure">
                  <div class="">
                    <img src="https://static.packt-cdn.com/products/9781788999786/graphics/assets/0812489a-4fef-4fdb-a4f9-c388cba671ac.png" />
                    <div>Fig 1. Figure Description</div>
                  </div>
                </div>
                <div class="document-note">
                  <div class="document-note-icon"><i class="fas fa-pen fa-lg"></i></div>
                  All of Spring Boot is open source, including the documentation. If you find problems with the docs or if you want to improve them, please get involved.
                </div>
              </article>
            </section>
          </div>
        </div>
        <div class="col-lg-1 col-md-1 col-sm-1 col-1"></div>
      </div>
    </div>
  </div>
</div>